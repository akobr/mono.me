/*
 * 2S-API
 *
 * The 2S-API is a RESTful API for interacting with the 2S Platform.
 *
 * The version of the OpenAPI document: 0.8.26.4237
 * Contact: kobr.ales@outlook.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = _42.Platform.Sdk.Client.OpenAPIDateConverter;

namespace _42.Platform.Sdk.Model
{
    /// <summary>
    /// Subject
    /// </summary>
    [DataContract(Name = "Subject")]
    public partial class Subject : IValidatableObject
    {
        /// <summary>
        /// Defines AnnotationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AnnotationTypeEnum
        {
            /// <summary>
            /// Enum Responsibility for value: Responsibility
            /// </summary>
            [EnumMember(Value = "Responsibility")]
            Responsibility = 1,

            /// <summary>
            /// Enum Unit for value: Unit
            /// </summary>
            [EnumMember(Value = "Unit")]
            Unit = 2,

            /// <summary>
            /// Enum Subject for value: Subject
            /// </summary>
            [EnumMember(Value = "Subject")]
            Subject = 3,

            /// <summary>
            /// Enum Usage for value: Usage
            /// </summary>
            [EnumMember(Value = "Usage")]
            Usage = 4,

            /// <summary>
            /// Enum Context for value: Context
            /// </summary>
            [EnumMember(Value = "Context")]
            Context = 5,

            /// <summary>
            /// Enum Execution for value: Execution
            /// </summary>
            [EnumMember(Value = "Execution")]
            Execution = 6
        }


        /// <summary>
        /// Gets or Sets AnnotationType
        /// </summary>
        [DataMember(Name = "AnnotationType", EmitDefaultValue = false)]
        public AnnotationTypeEnum? AnnotationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Subject" /> class.
        /// </summary>
        /// <param name="contexts">contexts.</param>
        /// <param name="usages">usages.</param>
        /// <param name="projectName">projectName.</param>
        /// <param name="viewName">viewName.</param>
        /// <param name="annotationKey">annotationKey.</param>
        /// <param name="name">name.</param>
        /// <param name="annotationType">annotationType (default to AnnotationTypeEnum.Responsibility).</param>
        /// <param name="isDisabled">isDisabled.</param>
        /// <param name="validFrom">validFrom.</param>
        /// <param name="expiresAt">expiresAt.</param>
        /// <param name="varTimeZone">varTimeZone.</param>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        /// <param name="documentationLink">documentationLink.</param>
        /// <param name="labels">labels.</param>
        /// <param name="values">values.</param>
        public Subject(List<string> contexts = default(List<string>), List<string> usages = default(List<string>), string projectName = default(string), string viewName = default(string), string annotationKey = default(string), string name = default(string), AnnotationTypeEnum? annotationType = AnnotationTypeEnum.Responsibility, bool? isDisabled = default(bool?), DateTime? validFrom = default(DateTime?), DateTime? expiresAt = default(DateTime?), string varTimeZone = default(string), string title = default(string), string description = default(string), string documentationLink = default(string), List<string> labels = default(List<string>), Dictionary<string, Object> values = default(Dictionary<string, Object>))
        {
            this.Contexts = contexts;
            this.Usages = usages;
            this.ProjectName = projectName;
            this.ViewName = viewName;
            this.AnnotationKey = annotationKey;
            this.Name = name;
            this.AnnotationType = annotationType;
            this.IsDisabled = isDisabled;
            this.ValidFrom = validFrom;
            this.ExpiresAt = expiresAt;
            this.VarTimeZone = varTimeZone;
            this.Title = title;
            this.Description = description;
            this.DocumentationLink = documentationLink;
            this.Labels = labels;
            this.Values = values;
        }

        /// <summary>
        /// Gets or Sets Contexts
        /// </summary>
        [DataMember(Name = "Contexts", EmitDefaultValue = false)]
        public List<string> Contexts { get; set; }

        /// <summary>
        /// Gets or Sets Usages
        /// </summary>
        [DataMember(Name = "Usages", EmitDefaultValue = false)]
        public List<string> Usages { get; set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name = "ProjectName", EmitDefaultValue = false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or Sets ViewName
        /// </summary>
        [DataMember(Name = "ViewName", EmitDefaultValue = false)]
        public string ViewName { get; set; }

        /// <summary>
        /// Gets or Sets AnnotationKey
        /// </summary>
        [DataMember(Name = "AnnotationKey", EmitDefaultValue = false)]
        public string AnnotationKey { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsDisabled
        /// </summary>
        [DataMember(Name = "IsDisabled", EmitDefaultValue = true)]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>
        [DataMember(Name = "ValidFrom", EmitDefaultValue = true)]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name = "ExpiresAt", EmitDefaultValue = true)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets VarTimeZone
        /// </summary>
        [DataMember(Name = "TimeZone", EmitDefaultValue = false)]
        public string VarTimeZone { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DocumentationLink
        /// </summary>
        [DataMember(Name = "DocumentationLink", EmitDefaultValue = false)]
        public string DocumentationLink { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "Labels", EmitDefaultValue = false)]
        public List<string> Labels { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "Values", EmitDefaultValue = false)]
        public Dictionary<string, Object> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Subject {\n");
            sb.Append("  Contexts: ").Append(Contexts).Append("\n");
            sb.Append("  Usages: ").Append(Usages).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  ViewName: ").Append(ViewName).Append("\n");
            sb.Append("  AnnotationKey: ").Append(AnnotationKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AnnotationType: ").Append(AnnotationType).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DocumentationLink: ").Append(DocumentationLink).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
