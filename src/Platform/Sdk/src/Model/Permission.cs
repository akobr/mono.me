/*
 * 2S-API
 *
 * The 2S-API is a RESTful API for interacting with the 2S Platform.
 *
 * The version of the OpenAPI document: 0.8.21.54913
 * Contact: kobr.ales@outlook.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = _42.Platform.Sdk.Client.OpenAPIDateConverter;

namespace _42.Platform.Sdk.Model
{
    /// <summary>
    /// Permission
    /// </summary>
    [DataContract(Name = "permission")]
    public partial class Permission : IValidatableObject
    {
        /// <summary>
        /// Defines Role
        /// </summary>
        public enum RoleEnum
        {
            /// <summary>
            /// Enum None for value: 0
            /// </summary>
            None = 0,

            /// <summary>
            /// Enum Reader for value: 1
            /// </summary>
            Reader = 1,

            /// <summary>
            /// Enum Contributor for value: 2
            /// </summary>
            Contributor = 2,

            /// <summary>
            /// Enum Administrator for value: 3
            /// </summary>
            Administrator = 3,

            /// <summary>
            /// Enum Owner for value: 4
            /// </summary>
            Owner = 4
        }


        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Permission" /> class.
        /// </summary>
        /// <param name="createdById">createdById.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="accessPointKey">accessPointKey.</param>
        /// <param name="role">role (default to RoleEnum.None).</param>
        public Permission(string createdById = default(string), string accountId = default(string), string accessPointKey = default(string), RoleEnum? role = RoleEnum.None)
        {
            this.CreatedById = createdById;
            this.AccountId = accountId;
            this.AccessPointKey = accessPointKey;
            this.Role = role;
        }

        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [DataMember(Name = "createdById", EmitDefaultValue = false)]
        public string CreatedById { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AccessPointKey
        /// </summary>
        [DataMember(Name = "accessPointKey", EmitDefaultValue = false)]
        public string AccessPointKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Permission {\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccessPointKey: ").Append(AccessPointKey).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
