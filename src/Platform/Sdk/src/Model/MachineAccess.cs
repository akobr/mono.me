/*
 * 2S-API
 *
 * The 2S-API is a RESTful API for interacting with the 2S Platform.
 *
 * The version of the OpenAPI document: 0.8.26.4237
 * Contact: kobr.ales@outlook.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = _42.Platform.Sdk.Client.OpenAPIDateConverter;

namespace _42.Platform.Sdk.Model
{
    /// <summary>
    /// MachineAccess
    /// </summary>
    [DataContract(Name = "MachineAccess")]
    public partial class MachineAccess : IValidatableObject
    {
        /// <summary>
        /// Defines Scope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            /// <summary>
            /// Enum AnnotationRead for value: AnnotationRead
            /// </summary>
            [EnumMember(Value = "AnnotationRead")]
            AnnotationRead = 1,

            /// <summary>
            /// Enum ConfigurationRead for value: ConfigurationRead
            /// </summary>
            [EnumMember(Value = "ConfigurationRead")]
            ConfigurationRead = 2,

            /// <summary>
            /// Enum DefaultRead for value: DefaultRead
            /// </summary>
            [EnumMember(Value = "DefaultRead")]
            DefaultRead = 3,

            /// <summary>
            /// Enum AnnotationReadWrite for value: AnnotationReadWrite
            /// </summary>
            [EnumMember(Value = "AnnotationReadWrite")]
            AnnotationReadWrite = 4,

            /// <summary>
            /// Enum ConfigurationReadWrite for value: ConfigurationReadWrite
            /// </summary>
            [EnumMember(Value = "ConfigurationReadWrite")]
            ConfigurationReadWrite = 5,

            /// <summary>
            /// Enum DefaultReadWrite for value: DefaultReadWrite
            /// </summary>
            [EnumMember(Value = "DefaultReadWrite")]
            DefaultReadWrite = 6
        }


        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "Scope", EmitDefaultValue = false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineAccess" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="objectId">objectId.</param>
        /// <param name="accessKey">accessKey.</param>
        /// <param name="scope">scope (default to ScopeEnum.AnnotationRead).</param>
        /// <param name="annotationKey">annotationKey.</param>
        public MachineAccess(string id = default(string), string objectId = default(string), string accessKey = default(string), ScopeEnum? scope = ScopeEnum.AnnotationRead, string annotationKey = default(string))
        {
            this.Id = id;
            this.ObjectId = objectId;
            this.AccessKey = accessKey;
            this.Scope = scope;
            this.AnnotationKey = annotationKey;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name = "ObjectId", EmitDefaultValue = false)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets AccessKey
        /// </summary>
        [DataMember(Name = "AccessKey", EmitDefaultValue = false)]
        public string AccessKey { get; set; }

        /// <summary>
        /// Gets or Sets AnnotationKey
        /// </summary>
        [DataMember(Name = "AnnotationKey", EmitDefaultValue = false)]
        public string AnnotationKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MachineAccess {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  AnnotationKey: ").Append(AnnotationKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
