/*
 * 2S-API
 *
 * The 2S-API is a RESTful API for interacting with the 2S Platform.
 *
 * The version of the OpenAPI document: 0.8.21.54913
 * Contact: kobr.ales@outlook.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using _42.Platform.Sdk.Client;
using _42.Platform.Sdk.Client.Auth;
using _42.Platform.Sdk.Model;

namespace _42.Platform.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteConfiguration(string organization, string project, string view, string key, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConfigurationWithHttpInfo(string organization, string project, string view, string key, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetConfiguration(string organization, string project, string view, string key, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetConfigurationWithHttpInfo(string organization, string project, string view, string key, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetResolvedConfiguration(string organization, string project, string view, string key, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetResolvedConfigurationWithHttpInfo(string organization, string project, string view, string key, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="body">The configuration model. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SetConfiguration(string organization, string project, string view, string key, Object? body = default(Object?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="body">The configuration model. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetConfigurationWithHttpInfo(string organization, string project, string view, string key, Object? body = default(Object?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConfigurationAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConfigurationWithHttpInfoAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetConfigurationAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetConfigurationWithHttpInfoAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetResolvedConfigurationAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetResolvedConfigurationWithHttpInfoAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="body">The configuration model. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetConfigurationAsync(string organization, string project, string view, string key, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="body">The configuration model. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetConfigurationWithHttpInfoAsync(string organization, string project, string view, string key, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApi : IConfigurationApiSync, IConfigurationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigurationApi : IConfigurationApi
    {
        private _42.Platform.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigurationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigurationApi(string basePath)
        {
            this.Configuration = _42.Platform.Sdk.Client.Configuration.MergeConfigurations(
                _42.Platform.Sdk.Client.GlobalConfiguration.Instance,
                new _42.Platform.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new _42.Platform.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new _42.Platform.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = _42.Platform.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigurationApi(_42.Platform.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = _42.Platform.Sdk.Client.Configuration.MergeConfigurations(
                _42.Platform.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new _42.Platform.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new _42.Platform.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = _42.Platform.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConfigurationApi(_42.Platform.Sdk.Client.ISynchronousClient client, _42.Platform.Sdk.Client.IAsynchronousClient asyncClient, _42.Platform.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = _42.Platform.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public _42.Platform.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public _42.Platform.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public _42.Platform.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public _42.Platform.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteConfiguration(string organization, string project, string view, string key, int operationIndex = 0)
        {
            DeleteConfigurationWithHttpInfo(organization, project, view, key);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public _42.Platform.Sdk.Client.ApiResponse<Object> DeleteConfigurationWithHttpInfo(string organization, string project, string view, string key, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling ConfigurationApi->DeleteConfiguration");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ConfigurationApi->DeleteConfiguration");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling ConfigurationApi->DeleteConfiguration");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationApi->DeleteConfiguration");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "ConfigurationApi.DeleteConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/{organization}/{project}/{view}/configuration/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConfigurationAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteConfigurationWithHttpInfoAsync(organization, project, view, key, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<Object>> DeleteConfigurationWithHttpInfoAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling ConfigurationApi->DeleteConfiguration");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ConfigurationApi->DeleteConfiguration");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling ConfigurationApi->DeleteConfiguration");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationApi->DeleteConfiguration");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "ConfigurationApi.DeleteConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/{organization}/{project}/{view}/configuration/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetConfiguration(string organization, string project, string view, string key, int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<Object> localVarResponse = GetConfigurationWithHttpInfo(organization, project, view, key);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public _42.Platform.Sdk.Client.ApiResponse<Object> GetConfigurationWithHttpInfo(string organization, string project, string view, string key, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling ConfigurationApi->GetConfiguration");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ConfigurationApi->GetConfiguration");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling ConfigurationApi->GetConfiguration");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationApi->GetConfiguration");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "ConfigurationApi.GetConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/{organization}/{project}/{view}/configuration/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetConfigurationAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<Object> localVarResponse = await GetConfigurationWithHttpInfoAsync(organization, project, view, key, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<Object>> GetConfigurationWithHttpInfoAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling ConfigurationApi->GetConfiguration");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ConfigurationApi->GetConfiguration");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling ConfigurationApi->GetConfiguration");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationApi->GetConfiguration");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "ConfigurationApi.GetConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/{organization}/{project}/{view}/configuration/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetResolvedConfiguration(string organization, string project, string view, string key, int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<Object> localVarResponse = GetResolvedConfigurationWithHttpInfo(organization, project, view, key);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public _42.Platform.Sdk.Client.ApiResponse<Object> GetResolvedConfigurationWithHttpInfo(string organization, string project, string view, string key, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling ConfigurationApi->GetResolvedConfiguration");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ConfigurationApi->GetResolvedConfiguration");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling ConfigurationApi->GetResolvedConfiguration");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationApi->GetResolvedConfiguration");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "ConfigurationApi.GetResolvedConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/{organization}/{project}/{view}/configuration/{key}/resolved", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResolvedConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetResolvedConfigurationAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<Object> localVarResponse = await GetResolvedConfigurationWithHttpInfoAsync(organization, project, view, key, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<Object>> GetResolvedConfigurationWithHttpInfoAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling ConfigurationApi->GetResolvedConfiguration");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ConfigurationApi->GetResolvedConfiguration");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling ConfigurationApi->GetResolvedConfiguration");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationApi->GetResolvedConfiguration");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "ConfigurationApi.GetResolvedConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/{organization}/{project}/{view}/configuration/{key}/resolved", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResolvedConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="body">The configuration model. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SetConfiguration(string organization, string project, string view, string key, Object? body = default(Object?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<Object> localVarResponse = SetConfigurationWithHttpInfo(organization, project, view, key, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="body">The configuration model. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public _42.Platform.Sdk.Client.ApiResponse<Object> SetConfigurationWithHttpInfo(string organization, string project, string view, string key, Object? body = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling ConfigurationApi->SetConfiguration");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ConfigurationApi->SetConfiguration");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling ConfigurationApi->SetConfiguration");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationApi->SetConfiguration");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConfigurationApi.SetConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/{organization}/{project}/{view}/configuration/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="body">The configuration model. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetConfigurationAsync(string organization, string project, string view, string key, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<Object> localVarResponse = await SetConfigurationWithHttpInfoAsync(organization, project, view, key, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="body">The configuration model. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<Object>> SetConfigurationWithHttpInfoAsync(string organization, string project, string view, string key, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling ConfigurationApi->SetConfiguration");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling ConfigurationApi->SetConfiguration");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling ConfigurationApi->SetConfiguration");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling ConfigurationApi->SetConfiguration");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConfigurationApi.SetConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/{organization}/{project}/{view}/configuration/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
