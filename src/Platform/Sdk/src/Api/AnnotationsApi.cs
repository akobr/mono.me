/*
 * 2S-API
 *
 * The 2S-API is a RESTful API for interacting with the 2S Platform.
 *
 * The version of the OpenAPI document: 0.8.14.63984
 * Contact: kobr.ales@outlook.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using _42.Platform.Sdk.Client;
using _42.Platform.Sdk.Client.Auth;
using _42.Platform.Sdk.Model;

namespace _42.Platform.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnnotationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAnnotation(string organization, string project, string view, string key, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAnnotationWithHttpInfo(string organization, string project, string view, string key, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Annotation</returns>
        Annotation GetAnnotation(string organization, string project, string view, string key, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Annotation</returns>
        ApiResponse<Annotation> GetAnnotationWithHttpInfo(string organization, string project, string view, string key, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        AnnotationsResponse GetAnnotations(string organization, string project, string view, string? continuationToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        ApiResponse<AnnotationsResponse> GetAnnotationsWithHttpInfo(string organization, string project, string view, string? continuationToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="subjectNameQuery">The name query to filter the contexts by subject. (optional)</param>
        /// <param name="nameQuery">The name query to filter the contexts. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        AnnotationsResponse GetContexts(string organization, string project, string view, string? subjectNameQuery = default(string?), string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="subjectNameQuery">The name query to filter the contexts by subject. (optional)</param>
        /// <param name="nameQuery">The name query to filter the contexts. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        ApiResponse<AnnotationsResponse> GetContextsWithHttpInfo(string organization, string project, string view, string? subjectNameQuery = default(string?), string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="descendants">The type of descendants to retrieve, possible value is: usages, contexts, executions, or all.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        AnnotationsResponse GetDescendants(string organization, string project, string view, string key, string descendants, string? continuationToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="descendants">The type of descendants to retrieve, possible value is: usages, contexts, executions, or all.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        ApiResponse<AnnotationsResponse> GetDescendantsWithHttpInfo(string organization, string project, string view, string key, string descendants, string? continuationToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the executions by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the executions by subject. (optional)</param>
        /// <param name="contextNameQuery">The name query to filter the executions by context. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        AnnotationsResponse GetExecutions(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? contextNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the executions by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the executions by subject. (optional)</param>
        /// <param name="contextNameQuery">The name query to filter the executions by context. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        ApiResponse<AnnotationsResponse> GetExecutionsWithHttpInfo(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? contextNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the responsibilities. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        AnnotationsResponse GetResponsibilities(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the responsibilities. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        ApiResponse<AnnotationsResponse> GetResponsibilitiesWithHttpInfo(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the subjects. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        AnnotationsResponse GetSubjects(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the subjects. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        ApiResponse<AnnotationsResponse> GetSubjectsWithHttpInfo(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the usages by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the usages by subject. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        AnnotationsResponse GetUsages(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the usages by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the usages by subject. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        ApiResponse<AnnotationsResponse> GetUsagesWithHttpInfo(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="annotation">The annotation to create or update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Annotation</returns>
        Annotation SetAnnotation(string organization, string project, string view, string key, Annotation? annotation = default(Annotation?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="annotation">The annotation to create or update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Annotation</returns>
        ApiResponse<Annotation> SetAnnotationWithHttpInfo(string organization, string project, string view, string key, Annotation? annotation = default(Annotation?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Guid</returns>
        Guid SetAnnotations(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SetAnnotationsWithHttpInfo(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Guid</returns>
        Guid SetAnnotationsSimple(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SetAnnotationsSimpleWithHttpInfo(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnnotationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAnnotationAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAnnotationWithHttpInfoAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Annotation</returns>
        System.Threading.Tasks.Task<Annotation> GetAnnotationAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Annotation>> GetAnnotationWithHttpInfoAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        System.Threading.Tasks.Task<AnnotationsResponse> GetAnnotationsAsync(string organization, string project, string view, string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationsResponse>> GetAnnotationsWithHttpInfoAsync(string organization, string project, string view, string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="subjectNameQuery">The name query to filter the contexts by subject. (optional)</param>
        /// <param name="nameQuery">The name query to filter the contexts. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        System.Threading.Tasks.Task<AnnotationsResponse> GetContextsAsync(string organization, string project, string view, string? subjectNameQuery = default(string?), string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="subjectNameQuery">The name query to filter the contexts by subject. (optional)</param>
        /// <param name="nameQuery">The name query to filter the contexts. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationsResponse>> GetContextsWithHttpInfoAsync(string organization, string project, string view, string? subjectNameQuery = default(string?), string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="descendants">The type of descendants to retrieve, possible value is: usages, contexts, executions, or all.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        System.Threading.Tasks.Task<AnnotationsResponse> GetDescendantsAsync(string organization, string project, string view, string key, string descendants, string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="descendants">The type of descendants to retrieve, possible value is: usages, contexts, executions, or all.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationsResponse>> GetDescendantsWithHttpInfoAsync(string organization, string project, string view, string key, string descendants, string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the executions by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the executions by subject. (optional)</param>
        /// <param name="contextNameQuery">The name query to filter the executions by context. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        System.Threading.Tasks.Task<AnnotationsResponse> GetExecutionsAsync(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? contextNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the executions by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the executions by subject. (optional)</param>
        /// <param name="contextNameQuery">The name query to filter the executions by context. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationsResponse>> GetExecutionsWithHttpInfoAsync(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? contextNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the responsibilities. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        System.Threading.Tasks.Task<AnnotationsResponse> GetResponsibilitiesAsync(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the responsibilities. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationsResponse>> GetResponsibilitiesWithHttpInfoAsync(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the subjects. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        System.Threading.Tasks.Task<AnnotationsResponse> GetSubjectsAsync(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the subjects. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationsResponse>> GetSubjectsWithHttpInfoAsync(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the usages by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the usages by subject. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        System.Threading.Tasks.Task<AnnotationsResponse> GetUsagesAsync(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the usages by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the usages by subject. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationsResponse>> GetUsagesWithHttpInfoAsync(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="annotation">The annotation to create or update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Annotation</returns>
        System.Threading.Tasks.Task<Annotation> SetAnnotationAsync(string organization, string project, string view, string key, Annotation? annotation = default(Annotation?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="annotation">The annotation to create or update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Annotation>> SetAnnotationWithHttpInfoAsync(string organization, string project, string view, string key, Annotation? annotation = default(Annotation?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SetAnnotationsAsync(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SetAnnotationsWithHttpInfoAsync(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SetAnnotationsSimpleAsync(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SetAnnotationsSimpleWithHttpInfoAsync(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnnotationsApi : IAnnotationsApiSync, IAnnotationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnnotationsApi : IAnnotationsApi
    {
        private _42.Platform.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnnotationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnnotationsApi(string basePath)
        {
            this.Configuration = _42.Platform.Sdk.Client.Configuration.MergeConfigurations(
                _42.Platform.Sdk.Client.GlobalConfiguration.Instance,
                new _42.Platform.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new _42.Platform.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new _42.Platform.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = _42.Platform.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnnotationsApi(_42.Platform.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = _42.Platform.Sdk.Client.Configuration.MergeConfigurations(
                _42.Platform.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new _42.Platform.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new _42.Platform.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = _42.Platform.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AnnotationsApi(_42.Platform.Sdk.Client.ISynchronousClient client, _42.Platform.Sdk.Client.IAsynchronousClient asyncClient, _42.Platform.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = _42.Platform.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public _42.Platform.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public _42.Platform.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public _42.Platform.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public _42.Platform.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAnnotation(string organization, string project, string view, string key, int operationIndex = 0)
        {
            DeleteAnnotationWithHttpInfo(organization, project, view, key);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public _42.Platform.Sdk.Client.ApiResponse<Object> DeleteAnnotationWithHttpInfo(string organization, string project, string view, string key, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->DeleteAnnotation");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->DeleteAnnotation");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->DeleteAnnotation");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling AnnotationsApi->DeleteAnnotation");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "AnnotationsApi.DeleteAnnotation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/{organization}/{project}/{view}/annotations/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAnnotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAnnotationAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAnnotationWithHttpInfoAsync(organization, project, view, key, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<Object>> DeleteAnnotationWithHttpInfoAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->DeleteAnnotation");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->DeleteAnnotation");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->DeleteAnnotation");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling AnnotationsApi->DeleteAnnotation");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "AnnotationsApi.DeleteAnnotation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/{organization}/{project}/{view}/annotations/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAnnotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Annotation</returns>
        public Annotation GetAnnotation(string organization, string project, string view, string key, int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<Annotation> localVarResponse = GetAnnotationWithHttpInfo(organization, project, view, key);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Annotation</returns>
        public _42.Platform.Sdk.Client.ApiResponse<Annotation> GetAnnotationWithHttpInfo(string organization, string project, string view, string key, int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetAnnotation");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetAnnotation");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetAnnotation");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling AnnotationsApi->GetAnnotation");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "AnnotationsApi.GetAnnotation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Annotation>("/v1/{organization}/{project}/{view}/annotations/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnnotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Annotation</returns>
        public async System.Threading.Tasks.Task<Annotation> GetAnnotationAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<Annotation> localVarResponse = await GetAnnotationWithHttpInfoAsync(organization, project, view, key, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<Annotation>> GetAnnotationWithHttpInfoAsync(string organization, string project, string view, string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetAnnotation");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetAnnotation");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetAnnotation");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling AnnotationsApi->GetAnnotation");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "AnnotationsApi.GetAnnotation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Annotation>("/v1/{organization}/{project}/{view}/annotations/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnnotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        public AnnotationsResponse GetAnnotations(string organization, string project, string view, string? continuationToken = default(string?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = GetAnnotationsWithHttpInfo(organization, project, view, continuationToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        public _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> GetAnnotationsWithHttpInfo(string organization, string project, string view, string? continuationToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetAnnotations");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetAnnotations");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetAnnotations");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetAnnotations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnnotationsResponse>("/v1/{organization}/{project}/{view}/annotations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnnotations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationsResponse> GetAnnotationsAsync(string organization, string project, string view, string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = await GetAnnotationsWithHttpInfoAsync(organization, project, view, continuationToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse>> GetAnnotationsWithHttpInfoAsync(string organization, string project, string view, string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetAnnotations");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetAnnotations");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetAnnotations");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetAnnotations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnnotationsResponse>("/v1/{organization}/{project}/{view}/annotations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnnotations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="subjectNameQuery">The name query to filter the contexts by subject. (optional)</param>
        /// <param name="nameQuery">The name query to filter the contexts. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        public AnnotationsResponse GetContexts(string organization, string project, string view, string? subjectNameQuery = default(string?), string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = GetContextsWithHttpInfo(organization, project, view, subjectNameQuery, nameQuery, continuationToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="subjectNameQuery">The name query to filter the contexts by subject. (optional)</param>
        /// <param name="nameQuery">The name query to filter the contexts. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        public _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> GetContextsWithHttpInfo(string organization, string project, string view, string? subjectNameQuery = default(string?), string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetContexts");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetContexts");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetContexts");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (subjectNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "subjectNameQuery", subjectNameQuery));
            }
            if (nameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "nameQuery", nameQuery));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetContexts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnnotationsResponse>("/v1/{organization}/{project}/{view}/contexts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContexts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="subjectNameQuery">The name query to filter the contexts by subject. (optional)</param>
        /// <param name="nameQuery">The name query to filter the contexts. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationsResponse> GetContextsAsync(string organization, string project, string view, string? subjectNameQuery = default(string?), string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = await GetContextsWithHttpInfoAsync(organization, project, view, subjectNameQuery, nameQuery, continuationToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="subjectNameQuery">The name query to filter the contexts by subject. (optional)</param>
        /// <param name="nameQuery">The name query to filter the contexts. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse>> GetContextsWithHttpInfoAsync(string organization, string project, string view, string? subjectNameQuery = default(string?), string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetContexts");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetContexts");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetContexts");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (subjectNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "subjectNameQuery", subjectNameQuery));
            }
            if (nameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "nameQuery", nameQuery));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetContexts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnnotationsResponse>("/v1/{organization}/{project}/{view}/contexts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContexts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="descendants">The type of descendants to retrieve, possible value is: usages, contexts, executions, or all.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        public AnnotationsResponse GetDescendants(string organization, string project, string view, string key, string descendants, string? continuationToken = default(string?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = GetDescendantsWithHttpInfo(organization, project, view, key, descendants, continuationToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="descendants">The type of descendants to retrieve, possible value is: usages, contexts, executions, or all.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        public _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> GetDescendantsWithHttpInfo(string organization, string project, string view, string key, string descendants, string? continuationToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetDescendants");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetDescendants");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetDescendants");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling AnnotationsApi->GetDescendants");
            }

            // verify the required parameter 'descendants' is set
            if (descendants == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'descendants' when calling AnnotationsApi->GetDescendants");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("descendants", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(descendants)); // path parameter
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetDescendants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnnotationsResponse>("/v1/{organization}/{project}/{view}/annotations/{key}/{descendants}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDescendants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="descendants">The type of descendants to retrieve, possible value is: usages, contexts, executions, or all.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationsResponse> GetDescendantsAsync(string organization, string project, string view, string key, string descendants, string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = await GetDescendantsWithHttpInfoAsync(organization, project, view, key, descendants, continuationToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="descendants">The type of descendants to retrieve, possible value is: usages, contexts, executions, or all.</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse>> GetDescendantsWithHttpInfoAsync(string organization, string project, string view, string key, string descendants, string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetDescendants");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetDescendants");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetDescendants");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling AnnotationsApi->GetDescendants");
            }

            // verify the required parameter 'descendants' is set
            if (descendants == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'descendants' when calling AnnotationsApi->GetDescendants");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("descendants", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(descendants)); // path parameter
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetDescendants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnnotationsResponse>("/v1/{organization}/{project}/{view}/annotations/{key}/{descendants}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDescendants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the executions by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the executions by subject. (optional)</param>
        /// <param name="contextNameQuery">The name query to filter the executions by context. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        public AnnotationsResponse GetExecutions(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? contextNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = GetExecutionsWithHttpInfo(organization, project, view, responsibilityNameQuery, subjectNameQuery, contextNameQuery, continuationToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the executions by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the executions by subject. (optional)</param>
        /// <param name="contextNameQuery">The name query to filter the executions by context. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        public _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> GetExecutionsWithHttpInfo(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? contextNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetExecutions");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetExecutions");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetExecutions");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (responsibilityNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responsibilityNameQuery", responsibilityNameQuery));
            }
            if (subjectNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "subjectNameQuery", subjectNameQuery));
            }
            if (contextNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "contextNameQuery", contextNameQuery));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetExecutions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnnotationsResponse>("/v1/{organization}/{project}/{view}/executions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExecutions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the executions by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the executions by subject. (optional)</param>
        /// <param name="contextNameQuery">The name query to filter the executions by context. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationsResponse> GetExecutionsAsync(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? contextNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = await GetExecutionsWithHttpInfoAsync(organization, project, view, responsibilityNameQuery, subjectNameQuery, contextNameQuery, continuationToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the executions by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the executions by subject. (optional)</param>
        /// <param name="contextNameQuery">The name query to filter the executions by context. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse>> GetExecutionsWithHttpInfoAsync(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? contextNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetExecutions");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetExecutions");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetExecutions");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (responsibilityNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responsibilityNameQuery", responsibilityNameQuery));
            }
            if (subjectNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "subjectNameQuery", subjectNameQuery));
            }
            if (contextNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "contextNameQuery", contextNameQuery));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetExecutions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnnotationsResponse>("/v1/{organization}/{project}/{view}/executions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExecutions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the responsibilities. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        public AnnotationsResponse GetResponsibilities(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = GetResponsibilitiesWithHttpInfo(organization, project, view, nameQuery, continuationToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the responsibilities. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        public _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> GetResponsibilitiesWithHttpInfo(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetResponsibilities");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetResponsibilities");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetResponsibilities");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (nameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "nameQuery", nameQuery));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetResponsibilities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnnotationsResponse>("/v1/{organization}/{project}/{view}/responsibilities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResponsibilities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the responsibilities. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationsResponse> GetResponsibilitiesAsync(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = await GetResponsibilitiesWithHttpInfoAsync(organization, project, view, nameQuery, continuationToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the responsibilities. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse>> GetResponsibilitiesWithHttpInfoAsync(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetResponsibilities");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetResponsibilities");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetResponsibilities");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (nameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "nameQuery", nameQuery));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetResponsibilities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnnotationsResponse>("/v1/{organization}/{project}/{view}/responsibilities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResponsibilities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the subjects. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        public AnnotationsResponse GetSubjects(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = GetSubjectsWithHttpInfo(organization, project, view, nameQuery, continuationToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the subjects. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        public _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> GetSubjectsWithHttpInfo(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetSubjects");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetSubjects");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetSubjects");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (nameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "nameQuery", nameQuery));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetSubjects";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnnotationsResponse>("/v1/{organization}/{project}/{view}/subjects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the subjects. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationsResponse> GetSubjectsAsync(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = await GetSubjectsWithHttpInfoAsync(organization, project, view, nameQuery, continuationToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="nameQuery">The name query to filter the subjects. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse>> GetSubjectsWithHttpInfoAsync(string organization, string project, string view, string? nameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetSubjects");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetSubjects");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetSubjects");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (nameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "nameQuery", nameQuery));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetSubjects";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnnotationsResponse>("/v1/{organization}/{project}/{view}/subjects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the usages by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the usages by subject. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnotationsResponse</returns>
        public AnnotationsResponse GetUsages(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = GetUsagesWithHttpInfo(organization, project, view, responsibilityNameQuery, subjectNameQuery, continuationToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the usages by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the usages by subject. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnotationsResponse</returns>
        public _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> GetUsagesWithHttpInfo(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetUsages");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetUsages");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetUsages");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (responsibilityNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responsibilityNameQuery", responsibilityNameQuery));
            }
            if (subjectNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "subjectNameQuery", subjectNameQuery));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetUsages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnnotationsResponse>("/v1/{organization}/{project}/{view}/usages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the usages by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the usages by subject. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnotationsResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationsResponse> GetUsagesAsync(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse> localVarResponse = await GetUsagesWithHttpInfoAsync(organization, project, view, responsibilityNameQuery, subjectNameQuery, continuationToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="responsibilityNameQuery">The name query to filter the usages by responsibility. (optional)</param>
        /// <param name="subjectNameQuery">The name query to filter the usages by subject. (optional)</param>
        /// <param name="continuationToken">The continuation token for multi-page queries. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnotationsResponse)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<AnnotationsResponse>> GetUsagesWithHttpInfoAsync(string organization, string project, string view, string? responsibilityNameQuery = default(string?), string? subjectNameQuery = default(string?), string? continuationToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->GetUsages");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->GetUsages");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->GetUsages");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            if (responsibilityNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responsibilityNameQuery", responsibilityNameQuery));
            }
            if (subjectNameQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "subjectNameQuery", subjectNameQuery));
            }
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(_42.Platform.Sdk.Client.ClientUtils.ParameterToMultiMap("", "continuationToken", continuationToken));
            }

            localVarRequestOptions.Operation = "AnnotationsApi.GetUsages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnnotationsResponse>("/v1/{organization}/{project}/{view}/usages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="annotation">The annotation to create or update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Annotation</returns>
        public Annotation SetAnnotation(string organization, string project, string view, string key, Annotation? annotation = default(Annotation?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<Annotation> localVarResponse = SetAnnotationWithHttpInfo(organization, project, view, key, annotation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="annotation">The annotation to create or update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Annotation</returns>
        public _42.Platform.Sdk.Client.ApiResponse<Annotation> SetAnnotationWithHttpInfo(string organization, string project, string view, string key, Annotation? annotation = default(Annotation?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->SetAnnotation");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->SetAnnotation");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->SetAnnotation");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling AnnotationsApi->SetAnnotation");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = annotation;

            localVarRequestOptions.Operation = "AnnotationsApi.SetAnnotation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Annotation>("/v1/{organization}/{project}/{view}/annotations/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAnnotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="annotation">The annotation to create or update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Annotation</returns>
        public async System.Threading.Tasks.Task<Annotation> SetAnnotationAsync(string organization, string project, string view, string key, Annotation? annotation = default(Annotation?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<Annotation> localVarResponse = await SetAnnotationWithHttpInfoAsync(organization, project, view, key, annotation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="key">The key of the requested annotation.</param>
        /// <param name="annotation">The annotation to create or update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<Annotation>> SetAnnotationWithHttpInfoAsync(string organization, string project, string view, string key, Annotation? annotation = default(Annotation?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->SetAnnotation");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->SetAnnotation");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->SetAnnotation");
            }

            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'key' when calling AnnotationsApi->SetAnnotation");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = annotation;

            localVarRequestOptions.Operation = "AnnotationsApi.SetAnnotation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Annotation>("/v1/{organization}/{project}/{view}/annotations/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAnnotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Guid</returns>
        public Guid SetAnnotations(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<Guid> localVarResponse = SetAnnotationsWithHttpInfo(organization, project, view, annotation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Guid</returns>
        public _42.Platform.Sdk.Client.ApiResponse<Guid> SetAnnotationsWithHttpInfo(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->SetAnnotations");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->SetAnnotations");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->SetAnnotations");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.Data = annotation;

            localVarRequestOptions.Operation = "AnnotationsApi.SetAnnotations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/v1/{organization}/{project}/{view}/annotations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAnnotations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SetAnnotationsAsync(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<Guid> localVarResponse = await SetAnnotationsWithHttpInfoAsync(organization, project, view, annotation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<Guid>> SetAnnotationsWithHttpInfoAsync(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->SetAnnotations");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->SetAnnotations");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->SetAnnotations");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.Data = annotation;

            localVarRequestOptions.Operation = "AnnotationsApi.SetAnnotations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/v1/{organization}/{project}/{view}/annotations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAnnotations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Guid</returns>
        public Guid SetAnnotationsSimple(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0)
        {
            _42.Platform.Sdk.Client.ApiResponse<Guid> localVarResponse = SetAnnotationsSimpleWithHttpInfo(organization, project, view, annotation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Guid</returns>
        public _42.Platform.Sdk.Client.ApiResponse<Guid> SetAnnotationsSimpleWithHttpInfo(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->SetAnnotationsSimple");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->SetAnnotationsSimple");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->SetAnnotationsSimple");
            }

            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.Data = annotation;

            localVarRequestOptions.Operation = "AnnotationsApi.SetAnnotationsSimple";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/v1/{organization}/{project}/{view}/annotations/simple", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAnnotationsSimple", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SetAnnotationsSimpleAsync(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            _42.Platform.Sdk.Client.ApiResponse<Guid> localVarResponse = await SetAnnotationsSimpleWithHttpInfoAsync(organization, project, view, annotation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="_42.Platform.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Target organization name.</param>
        /// <param name="project">Target project name.</param>
        /// <param name="view">The target view inside the project.</param>
        /// <param name="annotation">The annotations to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<_42.Platform.Sdk.Client.ApiResponse<Guid>> SetAnnotationsSimpleWithHttpInfoAsync(string organization, string project, string view, List<Annotation>? annotation = default(List<Annotation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'organization' when calling AnnotationsApi->SetAnnotationsSimple");
            }

            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'project' when calling AnnotationsApi->SetAnnotationsSimple");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new _42.Platform.Sdk.Client.ApiException(400, "Missing required parameter 'view' when calling AnnotationsApi->SetAnnotationsSimple");
            }


            _42.Platform.Sdk.Client.RequestOptions localVarRequestOptions = new _42.Platform.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = _42.Platform.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(organization)); // path parameter
            localVarRequestOptions.PathParameters.Add("project", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("view", _42.Platform.Sdk.Client.ClientUtils.ParameterToString(view)); // path parameter
            localVarRequestOptions.Data = annotation;

            localVarRequestOptions.Operation = "AnnotationsApi.SetAnnotationsSimple";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (manual) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (integrated) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/v1/{organization}/{project}/{view}/annotations/simple", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAnnotationsSimple", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
