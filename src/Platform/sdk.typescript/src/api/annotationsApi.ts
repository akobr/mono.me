/**
 * 2S-API
 * The 2S-API is a RESTful API for interacting with the 2S Platform.
 *
 * The version of the OpenAPI document: 0.8.26.4237
 * Contact: kobr.ales@outlook.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { Annotation } from '../model/annotation';
import { AnnotationsResponse } from '../model/annotationsResponse';
import { AnnotationsResponseContext } from '../model/annotationsResponseContext';
import { AnnotationsResponseExecution } from '../model/annotationsResponseExecution';
import { AnnotationsResponseResponsibility } from '../model/annotationsResponseResponsibility';
import { AnnotationsResponseSubject } from '../model/annotationsResponseSubject';
import { AnnotationsResponseUsage } from '../model/annotationsResponseUsage';
import { ErrorResponse } from '../model/errorResponse';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost:7071/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AnnotationsApiApiKeys {
    default,
    manual,
    integrated
}

export class AnnotationsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'manual': new HttpBearerAuth(),
        'integrated': new OAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: AnnotationsApiApiKeys, value: string) {
        (this.authentications as any)[AnnotationsApiApiKeys[key]].apiKey = value;
    }

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.manual.accessToken = accessToken;
    }

    set integratedAccessToken(token: string) {
        this.authentications.integrated.accessToken = token;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param key The key of the requested annotation.
     */
    public async deleteAnnotation (organization: string, project: string, view: string, key: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/annotations/{key}'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)))
            .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling deleteAnnotation.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling deleteAnnotation.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling deleteAnnotation.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling deleteAnnotation.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param key The key of the requested annotation.
     */
    public async getAnnotation (organization: string, project: string, view: string, key: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Annotation;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/annotations/{key}'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)))
            .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getAnnotation.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling getAnnotation.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling getAnnotation.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getAnnotation.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Annotation;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Annotation");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param continuationToken The continuation token for multi-page queries.
     */
    public async getAnnotations (organization: string, project: string, view: string, continuationToken?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AnnotationsResponse;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/annotations'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getAnnotations.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling getAnnotations.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling getAnnotations.');
        }

        if (continuationToken !== undefined) {
            localVarQueryParameters['continuationToken'] = ObjectSerializer.serialize(continuationToken, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AnnotationsResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AnnotationsResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param subjectNameQuery The name query to filter the contexts by subject.
     * @param nameQuery The name query to filter the contexts.
     * @param continuationToken The continuation token for multi-page queries.
     */
    public async getContexts (organization: string, project: string, view: string, subjectNameQuery?: string, nameQuery?: string, continuationToken?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AnnotationsResponseContext;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/contexts'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getContexts.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling getContexts.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling getContexts.');
        }

        if (subjectNameQuery !== undefined) {
            localVarQueryParameters['subjectNameQuery'] = ObjectSerializer.serialize(subjectNameQuery, "string");
        }

        if (nameQuery !== undefined) {
            localVarQueryParameters['nameQuery'] = ObjectSerializer.serialize(nameQuery, "string");
        }

        if (continuationToken !== undefined) {
            localVarQueryParameters['continuationToken'] = ObjectSerializer.serialize(continuationToken, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AnnotationsResponseContext;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AnnotationsResponseContext");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param key The key of the requested annotation.
     * @param descendants The type of descendants to retrieve, possible value is: usages, contexts, executions, or all.
     * @param continuationToken The continuation token for multi-page queries.
     */
    public async getDescendants (organization: string, project: string, view: string, key: string, descendants: string, continuationToken?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AnnotationsResponse;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/annotations/{key}/{descendants}'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)))
            .replace('{' + 'key' + '}', encodeURIComponent(String(key)))
            .replace('{' + 'descendants' + '}', encodeURIComponent(String(descendants)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getDescendants.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling getDescendants.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling getDescendants.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDescendants.');
        }

        // verify required parameter 'descendants' is not null or undefined
        if (descendants === null || descendants === undefined) {
            throw new Error('Required parameter descendants was null or undefined when calling getDescendants.');
        }

        if (continuationToken !== undefined) {
            localVarQueryParameters['continuationToken'] = ObjectSerializer.serialize(continuationToken, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AnnotationsResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AnnotationsResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param responsibilityNameQuery The name query to filter the executions by responsibility.
     * @param subjectNameQuery The name query to filter the executions by subject.
     * @param contextNameQuery The name query to filter the executions by context.
     * @param continuationToken The continuation token for multi-page queries.
     */
    public async getExecutions (organization: string, project: string, view: string, responsibilityNameQuery?: string, subjectNameQuery?: string, contextNameQuery?: string, continuationToken?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AnnotationsResponseExecution;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/executions'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getExecutions.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling getExecutions.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling getExecutions.');
        }

        if (responsibilityNameQuery !== undefined) {
            localVarQueryParameters['responsibilityNameQuery'] = ObjectSerializer.serialize(responsibilityNameQuery, "string");
        }

        if (subjectNameQuery !== undefined) {
            localVarQueryParameters['subjectNameQuery'] = ObjectSerializer.serialize(subjectNameQuery, "string");
        }

        if (contextNameQuery !== undefined) {
            localVarQueryParameters['contextNameQuery'] = ObjectSerializer.serialize(contextNameQuery, "string");
        }

        if (continuationToken !== undefined) {
            localVarQueryParameters['continuationToken'] = ObjectSerializer.serialize(continuationToken, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AnnotationsResponseExecution;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AnnotationsResponseExecution");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param nameQuery The name query to filter the responsibilities.
     * @param continuationToken The continuation token for multi-page queries.
     */
    public async getResponsibilities (organization: string, project: string, view: string, nameQuery?: string, continuationToken?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AnnotationsResponseResponsibility;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/responsibilities'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getResponsibilities.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling getResponsibilities.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling getResponsibilities.');
        }

        if (nameQuery !== undefined) {
            localVarQueryParameters['nameQuery'] = ObjectSerializer.serialize(nameQuery, "string");
        }

        if (continuationToken !== undefined) {
            localVarQueryParameters['continuationToken'] = ObjectSerializer.serialize(continuationToken, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AnnotationsResponseResponsibility;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AnnotationsResponseResponsibility");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param nameQuery The name query to filter the subjects.
     * @param continuationToken The continuation token for multi-page queries.
     */
    public async getSubjects (organization: string, project: string, view: string, nameQuery?: string, continuationToken?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AnnotationsResponseSubject;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/subjects'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSubjects.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling getSubjects.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling getSubjects.');
        }

        if (nameQuery !== undefined) {
            localVarQueryParameters['nameQuery'] = ObjectSerializer.serialize(nameQuery, "string");
        }

        if (continuationToken !== undefined) {
            localVarQueryParameters['continuationToken'] = ObjectSerializer.serialize(continuationToken, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AnnotationsResponseSubject;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AnnotationsResponseSubject");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param responsibilityNameQuery The name query to filter the usages by responsibility.
     * @param subjectNameQuery The name query to filter the usages by subject.
     * @param continuationToken The continuation token for multi-page queries.
     */
    public async getUsages (organization: string, project: string, view: string, responsibilityNameQuery?: string, subjectNameQuery?: string, continuationToken?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AnnotationsResponseUsage;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/usages'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getUsages.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling getUsages.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling getUsages.');
        }

        if (responsibilityNameQuery !== undefined) {
            localVarQueryParameters['responsibilityNameQuery'] = ObjectSerializer.serialize(responsibilityNameQuery, "string");
        }

        if (subjectNameQuery !== undefined) {
            localVarQueryParameters['subjectNameQuery'] = ObjectSerializer.serialize(subjectNameQuery, "string");
        }

        if (continuationToken !== undefined) {
            localVarQueryParameters['continuationToken'] = ObjectSerializer.serialize(continuationToken, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AnnotationsResponseUsage;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AnnotationsResponseUsage");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param key The key of the requested annotation.
     * @param annotation The annotation to create or update.
     */
    public async setAnnotation (organization: string, project: string, view: string, key: string, annotation?: Annotation, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Annotation;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/annotations/{key}'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)))
            .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling setAnnotation.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling setAnnotation.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling setAnnotation.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling setAnnotation.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(annotation, "Annotation")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Annotation;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Annotation");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param annotation The annotations to create.
     */
    public async setAnnotations (organization: string, project: string, view: string, annotation?: Array<Annotation>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/annotations'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling setAnnotations.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling setAnnotations.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling setAnnotations.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(annotation, "Array<Annotation>")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "string");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @param organization Target organization name.
     * @param project Target project name.
     * @param view The target view inside the project.
     * @param annotation The annotations to create.
     */
    public async setAnnotationsSimple (organization: string, project: string, view: string, annotation?: Array<Annotation>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/v1/{organization}/{project}/{view}/annotations/simple'
            .replace('{' + 'organization' + '}', encodeURIComponent(String(organization)))
            .replace('{' + 'project' + '}', encodeURIComponent(String(project)))
            .replace('{' + 'view' + '}', encodeURIComponent(String(view)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling setAnnotationsSimple.');
        }

        // verify required parameter 'project' is not null or undefined
        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling setAnnotationsSimple.');
        }

        // verify required parameter 'view' is not null or undefined
        if (view === null || view === undefined) {
            throw new Error('Required parameter view was null or undefined when calling setAnnotationsSimple.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(annotation, "Array<Annotation>")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.manual.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.manual.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.integrated.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.integrated.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "string");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
